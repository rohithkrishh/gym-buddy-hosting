
<%- include("../../views/partials/admin/header") %>

<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
</head>
<style>
    .error-message {
        color: red;
    }

    .thumbnails-container {
        display: flex;
        overflow-x: auto;
    }

    .thumbnail {
        margin-right: 10px;
    }
</style>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <!-- Form to edit product --->
                    <form method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data"
                        onsubmit="return validateForm()">
                        <!-- Hidden field for product ID -->
                        <input type="hidden" name="productId" value="<%= product._id %>">

                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control border"
                                id="product_name" value="<%= product.productName %>" required>
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <div class="col-lg-4 mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand" required>
                                <% for (let i = 0; i < brand.length; i++) { %>
                                    <option value="<%= brand[i].brandName %>" <%= product.brand === brand[i].brandName ? "selected" : "" %>>
                                        <%= brand[i].brandName %>
                                    </option>
                                <% } %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Full Description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description"
                                class="form-control border" rows="4" required><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular Price</label>
                                    <input placeholder="₹" name="regularPrice" type="number"
                                        class="form-control border" value="<%= product.regularPrice %>" required>
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale Price</label>
                                    <input placeholder="₹" name="salePrice" type="number" class="form-control border"
                                        value="<%= product.salePrice || '' %>">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Category</label>
                            <select class="form-select border" name="category" id="categorySelect" required onchange="updateVariantFields()">
                                <% for (let i = 0; i < cat.length; i++) { %>
                                    <option value="<%= cat[i]._id %>|<%= cat[i].type %>" 
                                        <%= product.category === cat[i]._id ? "selected" : "" %>>
                                        <%= cat[i].name %>
                                    </option>
                                <% } %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>

                        <div id="variantFields" class="mb-4">
                            <% product.variants.forEach((variant, index) => { %>
                                <div class="variant-container border p-3 mb-3" style="border-radius: 8px;" data-index="<%= index %>">
                                    <% if (variant.categoryType === "strength") { %>
                                        <div class="mb-4">
                                            <label class="form-label">Weight (kg)</label>
                                            <input type="number" name="variants[<%= index %>][weight]" 
                                                class="form-control border" min="0" 
                                                value="<%= variant.weight %>" required>
                                        </div>
                                    <% } else if (variant.categoryType === "cardio") { %>
                                        <div class="mb-4">
                                            <label class="form-label">Type</label>
                                            <select name="variants[<%= index %>][type]" 
                                                class="form-select border" required>
                                                <option value="automated" <%= variant.type === "automated" ? "selected" : "" %>>Automated</option>
                                                <option value="semi-automated" <%= variant.type === "semi-automated" ? "selected" : "" %>>Semi-Automated</option>
                                                <option value="manual" <%= variant.type === "manual" ? "selected" : "" %>>Manual</option>
                                            </select>
                                        </div>
                                    <% } %>
                                    <div class="mb-4">
                                        <label class="form-label">Price</label>
                                        <input type="number" name="variants[<%= index %>][price]" class="form-control border" 
                                            min="0" value="<%= variant.price %>" required>
                                    </div>
                                    <div class="mb-4">
                                        <label class="form-label">Stock</label>
                                        <input type="number" name="variants[<%= index %>][stock]" class="form-control border" 
                                            min="0" value="<%= variant.stock %>" required>
                                    </div>
                                    <div class="mb-4">
                                        <label class="form-label">SKU</label>
                                        <input type="text" name="variants[<%= index %>][sku]" class="form-control border" 
                                            value="<%= variant.sku %>" required>
                                    </div>
                                    <button type="button" class="btn btn-danger btn-sm" onclick="removeVariant(this)">Remove Variant</button>
                                </div>
                            <% }) %>
                        </div>

                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Current Images</h4>
                            </div>
                            <div class="row">
                                <% product.productImages.forEach((image, index) => { %>
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="/assets/login/<%= image %>" alt="Image <%= index + 1 %>" style="max-width: 150px;">
                                        <button type="button" class="btn btn-danger btn-sm" onclick="removeImage('<%= image.id %>')">Remove</button>
                                    </div>
                                <% }) %>
                            </div>
                        </div>

                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Add New Images</h4>
                            </div>
                            <div class="row">
                                <% for (let i = 1; i <= 2; i++) { %>
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <label class="form-label">Image <%= i %></label>
                                        <input class="form-control" type="file" name="newImages" id="input<%= i %>"
                                            accept="image/png, image/jpeg, image/jpg, image/webp"
                                            onchange="viewImage(event, <%= i %>)">
                                        <div class="image-cropper d-flex align-items-center mt-3" style="display: none;"
                                            id="cropper<%= i %>">
                                            <img src="" id="croppedImg<%= i %>" alt="" class="me-3" style="max-width: 150px;">
                                            <button type="button" class="btn btn-sm btn-primary"
                                                onclick="saveImage(<%= i %>)">Save</button>
                                        </div>
                                    </div>
                                <% } %>
                            </div>
                        </div>

                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" type="submit">Update</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>


<!-- Add these in your HTML head --->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // Prefill form fields with existing product data
    document.getElementById('product_name').value = '<%= product.name %>';
    document.getElementById('descriptionid').value = '<%= product.description %>';
    document.getElementById('categorySelect').value = '<%= product.category %>|<%= product.categoryType %>';

    // Preload existing variants
    const existingVariants = <%- JSON.stringify(product.variants) %>;
    existingVariants.forEach((variant, index) => {
        addVariantFields('<%= product.categoryType %>');
        const variantContainer = document.querySelector(`[data-index="${index}"]`);
        variantContainer.querySelector(`input[name="variants[${index}][price]"]`).value = variant.price || '';
        variantContainer.querySelector(`input[name="variants[${index}][stock]"]`).value = variant.stock || '';
        variantContainer.querySelector(`input[name="variants[${index}][sku]"]`).value = variant.sku || '';

        if (variant.weight) {
            variantContainer.querySelector(`input[name="variants[${index}][weight]"]`).value = variant.weight;
        }
        if (variant.type) {
            variantContainer.querySelector(`select[name="variants[${index}][type]"]`).value = variant.type;
        }
    });

    // Preload existing images
    const existingImages = <%- JSON.stringify(product.images) %>;
    existingImages.forEach((image, index) => {
        const cropperContainer = document.getElementById(`cropper${index + 1}`);
        const img = document.createElement('img');
        img.src = `/login/${image}`;
        img.alt = `Image ${index + 1}`;
        img.style.width = '150px';
        cropperContainer.style.display = 'flex';
        cropperContainer.appendChild(img);
    });
});

// Function to dynamically add variant fields
let variantIndex = <%- product.variants.length %>; // Start with the existing variant count

function addVariantFields(categoryType) {
    const variantFieldsContainer = document.getElementById('variantFields');

    // Create a container for this variant
    const variantContainer = document.createElement('div');
    variantContainer.className = 'variant-container border p-3 mb-3';
    variantContainer.style.borderRadius = '8px';
    variantContainer.setAttribute('data-index', variantIndex);

    // Add category-specific fields
    if (categoryType === 'strength') {
        const weightField = document.createElement('div');
        weightField.className = 'mb-4';
        weightField.innerHTML = `
            <label class="form-label">Weight (kg)</label>
            <input type="number" name="variants[${variantIndex}][weight]" class="form-control border" min="0">`;
        variantContainer.appendChild(weightField);
    } else if (categoryType === 'cardio') {
        const typeField = document.createElement('div');
        typeField.className = 'mb-4';
        typeField.innerHTML = `
            <label class="form-label">Type</label>
            <select name="variants[${variantIndex}][type]" class="form-select border">
                <option value="" disabled selected>Select Type</option>
                <option value="automated">Automated</option>
                <option value="semi-automated">Semi-Automated</option>
                <option value="manual">Manual</option>
            </select>`;
        variantContainer.appendChild(typeField);
    }

    // Add common fields for all variants
    const commonFields = `
        <div class="mb-4">
            <label class="form-label">Price</label>
            <input type="number" name="variants[${variantIndex}][price]" class="form-control border" min="0" required>
        </div>
        <div class="mb-4">
            <label class="form-label">Stock</label>
            <input type="number" name="variants[${variantIndex}][stock]" class="form-control border" min="0" required>
        </div>
        <div class="mb-4">
            <label class="form-label">SKU</label>
            <input type="text" name="variants[${variantIndex}][sku]" class="form-control border" required>
        </div>
        <button type="button" class="btn btn-danger btn-sm" onclick="removeVariant(this)">Remove Variant</button>`;
    variantContainer.innerHTML += commonFields;

    // Append the variant container to the main container
    variantFieldsContainer.appendChild(variantContainer);

    // Increment the variant index
    variantIndex++;
}

// Function to remove a variant
function removeVariant(button) {
    const variantContainer = button.closest('.variant-container');
    if (variantContainer) {
        variantContainer.remove();
    }
}

// Function to dynamically update variant fields when the category changes
function updateVariantFields() {
    const categoryValue = document.getElementById('categorySelect').value;
    const [categoryId, categoryType] = categoryValue.split('|');
    const variantFieldsContainer = document.getElementById('variantFields');

    // Clear previous fields
    variantFieldsContainer.innerHTML = '';

    if (!categoryType) return; // Exit if no category is selected

    addVariantFields(categoryType);

    // Add a button to allow adding more variants
    const addVariantButton = document.createElement('button');
    addVariantButton.type = 'button';
    addVariantButton.className = 'btn btn-secondary mt-3';
    addVariantButton.innerText = 'Add Another Variant';
    addVariantButton.onclick = () => addVariantFields(categoryType);
    variantFieldsContainer.appendChild(addVariantButton);
}

// Image cropping and preview functionality

let croppers = {};

// function viewImage(event, index) {
//     const input = event.target;
//     const file = input.files[0];

//     if (file) {
//         const reader = new FileReader();
//         reader.onload = function (e) {
//             const cropperContainer = document.getElementById(`cropper${index}`);
//             const img = document.getElementById(`croppedImg${index}`);

//             if (croppers[index]) {
//                 croppers[index].destroy();
//             }

//             cropperContainer.style.display = 'flex';
//             img.src = e.target.result;

//             croppers[index] = new Cropper(img, {
//                 aspectRatio: 1,
//                 viewMode: 1,
//                 guides: true,
//                 background: false,
//                 autoCropArea: 1,
//                 zoomable: true,
//             });
//         };
//         reader.readAsDataURL(file);
//     }
// }




// function saveImage(index) {
//     if (croppers[index]) {
//         const cropper = croppers[index];
//         const croppedCanvas = cropper.getCroppedCanvas();
//         const img = document.getElementById(`croppedImg${index}`);

//         croppedCanvas.toBlob((blob) => {
//             const fileName = `cropped-img-${Date.now()}-${index}.png`;

//             const input = document.getElementById(`input${index}`);
//             const newFile = new File([blob], fileName, { type: blob.type });
//             const dataTransfer = new DataTransfer();
//             dataTransfer.items.add(newFile);
//             input.files = dataTransfer.files;

//             img.src = croppedCanvas.toDataURL('image/png');
//             alert(`Image ${index} cropped and saved.`);
//         });

//         cropper.destroy();
//         croppers[index] = null;

//         const cropperContainer = document.getElementById(`cropper${index}`);
//         cropperContainer.style.display = 'none';
//     }
// }


function viewImage(event, index) {
            const input = event.target;
            const file = input.files[0];

            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const cropperContainer = document.getElementById(`cropper${index}`);
                    const img = document.getElementById(`croppedImg${index}`);

                    // Reset Cropper if it already exists
                    if (croppers[index]) {
                        croppers[index].destroy();
                    }

                    cropperContainer.style.display = 'flex';
                    img.src = e.target.result;

                    // Initialize Cropper.js
                    croppers[index] = new Cropper(img, {
                        aspectRatio: 1,
                        viewMode: 1,
                        guides: true,
                        background: false,
                        autoCropArea: 1,
                        zoomable: true,
                    });
                };
                reader.readAsDataURL(file);
            }
        }



        function saveImage(index) {
            if (croppers[index]) {
                const cropper = croppers[index];
                const croppedCanvas = cropper.getCroppedCanvas();
                const img = document.getElementById(`croppedImg${index}`);

                croppedCanvas.toBlob((blob) => {
                    const fileName = `cropped-img-${Date.now()}-${index}.png`;

                    // Simulate file upload to input
                    const input = document.getElementById(`input${index}`);
                    const newFile = new File([blob], fileName, { type: blob.type });
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(newFile);
                    input.files = dataTransfer.files;

                    img.src = croppedCanvas.toDataURL('image/png');
                    alert(`Image ${index} cropped and saved.`);
                });

                // Cleanup Cropper
                cropper.destroy();
                croppers[index] = null;

                const cropperContainer = document.getElementById(`cropper${index}`);
                cropperContainer.style.display = 'none';
            }
        }


        const selectedImages = [];
        document.getElementById("input1").addEventListener("change", handleFileSelect);

        function handleFileSelect(event) {

            const addedImagesContainer = document.getElementById("addedImagesContainer");
            addedImagesContainer.innerHTML = " ";
            const files = event.target.files;
            for (let i = 0; i < files.length; i++) {

                const file = files[i];
                selectedImages.push(file);
                const thumbnail = document.createElement("div");
                thumbnail.classList.add("thumbnail");
                const img = document.createElement("img");
                img.src = URL.createObjectURL(file);
                img.alt = "thumbnail";
                img.style.width = "50px";
                img.style.height = "auto";
                const removeIcon = document.createElement("span");
                removeIcon.classList.add("remove-icon");
                removeIcon.innerHTML = "&times";
                removeIcon.addEventListener("click", function () {
                    const index = selectedImages.indexOf(file);
                    if (index !== 1) {
                        selectedImages.splice(index, 1);
                    }
                    thumbnail.remove();
                });

                thumbnail.appendChild(img);
                thumbnail.appendChild(removeIcon);
                addedImagesContainer.appendChild(thumbnail);
            }


        }


</script> 
