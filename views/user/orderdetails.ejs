
<style>
    body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f4f4f4;
        margin: 0;
        padding: 20px;
    }

    .container {
        max-width: 65%;
        margin: 0 auto;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    h1,
    h2 {
        color: #2c3e50;
    }

    .order-info {
        background-color: #ecf0f1;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
    }

    .order-status {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 15px;
        font-weight: bold;
    }

    .status-processing {
        background-color: #f39c12;
        color: #fff;
    }

    .status-shipped {
        background-color: #3498db;
        color: #fff;
    }

    .status-delivered {
        background-color: #2ecc71;
        color: #fff;
    }

    .status-cancelled {
        background-color: #e74c3c;
        color: #fff;
    }

    .tracking {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .tracking-step {
        text-align: center;
        position: relative;
        flex: 1;
    }

    .tracking-step::before {
        content: '';
        position: absolute;
        top: 15px;
        left: -50%;
        right: 50%;
        height: 2px;
        background-color: #3498db;
        z-index: 1;
    }

    .tracking-step:first-child::before {
        display: none;
    }

    .tracking-icon {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background-color: #3498db;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 5px;
        position: relative;
        z-index: 2;
    }

    .tracking-icon.inactive {
        background-color: #bdc3c7;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

    th,
    td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: #2c3e50;
        color: #fff;
    }

    .total-section {
        background-color: #ecf0f1;
        padding: 15px;
        border-radius: 5px;
        margin-top: 20px;
    }

    .total-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
    }

    .grand-total {
        font-weight: bold;
        font-size: 1.2em;
        color: #2c3e50;
    }

  
    
    .btn {
        display: inline-block;
        padding: 10px 20px;
        background-color: #ec2727;
        color: #fff;
        text-decoration: none;
        border-radius: 5px;
        font-weight: bold;
        text-align: center;
    }

     .btnn {
        display: inline-block;
        padding: 6px 10px;
        background-color: #be0fc4;
        color: #fff;
        text-decoration: none;
        border-radius: 5px;
        font-weight: bold;
        text-align: center;
    }


    .btn:hover {
        background-color: #ec8507;
    }

    @media (max-width: 600px) {
        .tracking {
            flex-direction: column;
        }

        .tracking-step {
            margin-bottom: 20px;
        }

        .tracking-step::before {
            display: none;
        }

        table,
        tr,
        td {
            display: block;
        }

        th {
            display: none;
        }

        tr {
            margin-bottom: 15px;
        }

        td {
            text-align: right;
            padding-left: 50%;
            position: relative;
        }

        td::before {
            content: attr(data-label);
            position: absolute;
            left: 6px;
            width: 45%;
            padding-right: 10px;
            white-space: nowrap;
            font-weight: bold;
            text-align: left;
        }
    }
</style>

<body>


    <div class="container">
        <a href="javascript:history.back()" style="display: inline-block; padding: 8px 16px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px;">← Back</a>

        <h1>Order Details</h1>
        <div class="order-info">
            <p><strong>Order ID:</strong> <%= order.transactionId %></p>
            <p><strong>Date:</strong> <%= order.createdAt.toLocaleDateString() %></p>
            <p><strong>Status:</strong> 
                <span class="order-status status-<%= order.orderStatus.toLowerCase() %>">
                    <%= order.orderStatus %>
                </span>
            </p>
        </div>

        <h2>Order Tracking</h2>
        <div class="tracking">
            <% const trackingSteps = ['Pending', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered']; %>
            <% const currentStepIndex = trackingSteps.indexOf(order.orderStatus); %>
            <% trackingSteps.forEach((step, index) => { %>
                <div class="tracking-step">
                    <div class="tracking-icon <%= index > currentStepIndex ? 'inactive' : '' %>">
                        <%= index + 1 %>
                    </div>
                    <div><%= step %></div>
                </div>
            <% }); %>
        </div>

        <h2>Items Ordered</h2>
        <table>
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Image</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total Price</th>
                   
                </tr>
            </thead>
            <tbody>
                <% order.cartItems.forEach(item => { %>
                    <tr>
                        <td data-label="Product"><%= item.product.productName %></td>
                        <td>
                            <img src="/assets/login/<%= item.product.productImages[0] %>" alt="<%= item.product.productName %>" 
                                style="width: 50px; height: 50px; border-radius: 50%;">
                        </td>
                        <td data-label="Quantity"><%= item.quantity %></td>
                        <td data-label="Price">₹<%= item.salePrice.toFixed(2) %></td>
                        <td data-label="Total">₹<%= item.salePrice.toFixed()*item.quantity %></td>
                        
                    </tr>
            </tbody>
            
            <% }); %>
        </table>
        <div class="total-section">
            <div class="total-row">
                <span>Subtotal:</span>
                <span>₹<%= order.totalPrice.toFixed(2) %></span>
            </div>
           
            <div class="total-row">
                <span>Discount:</span>
                <span>₹<%= order.discount.toFixed(2) %></span>
            </div>
           
            <div class="total-row grand-total">
                <span>Total:</span>
                <span>₹<%= order.finalPrice.toFixed(2) %></span>
            </div>
        </div>

        <h2>Shipping Address</h2>
        <p>
            <strong>Address Type:</strong> <%= order.shippingAddress.addressType %><br>
            <strong>Name:</strong> <%= order.shippingAddress.name %><br>
            <strong>City:</strong> <%= order.shippingAddress.city %><br>
            <strong>Landmark:</strong> <%= order.shippingAddress.landMark %><br>
            <strong>State & Pin:</strong> <%= order.shippingAddress.state %> <%= order.shippingAddress.pincode %><br>
            <strong>Phone:</strong> <%= order.shippingAddress.phone %>
        </p>

     
        <% if (
            order.paymentMethod === 'Online' && 
            order.paymentStatus !== 'Pending' && 
            order.paymentStatus !== 'Failed' && 
            order.orderStatus !== 'Cancelled' && 
            order.orderStatus !== 'Delivered' && 
            order.orderStatus !== 'Returned'
        ) { %>
            <button class="btn cancel-btn" data-order-id="<%= order.id %>">Cancel Order</button>
        <% } %>
        
        
  

        <% if (order.orderStatus === 'Delivered' || new Date() - new Date(order.deliveredAt) <= 10 * 24 * 60 * 60 * 1000) { %>
            <button class="btn return-btn" data-order-id="<%= order._id %>">Return Order</button>
        <% } %>

        <% if (order.orderStatus !== 'Cancelled' && order.orderStatus != 'Pending') { %>

            <a href="/download-invoice/<%= order._id %>" class="btnn download-btn">Download Invoice (PDF)</a>
         
        <% } %>
        
    </div>
</body>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    // Cancel Order Logic with Reason
    document.querySelectorAll('.cancel-btn').forEach(button => {
        button.addEventListener('click', () => {
            const orderId = button.getAttribute('data-order-id');
            const orderStatus = button.getAttribute('data-status');

            if (orderStatus === 'Shipped' || orderStatus === 'Out for Delivery') {
                Swal.fire({
                    title: 'Cannot Cancel Order',
                    text: 'This order is already shipped or out for delivery.',
                    icon: 'warning',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK'
                });
            } else {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this action!",
                    icon: 'warning',
                    input: 'textarea',
                    inputPlaceholder: 'Enter reason for cancellation...',
                    inputAttributes: {
                        'aria-label': 'Enter reason for cancellation'
                    },
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, cancel it!',
                    preConfirm: (reason) => {
                        if (!reason) {
                            Swal.showValidationMessage('Cancellation reason is required!');
                        }
                        return reason;
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        const reason = result.value;
                        fetch(`/cancel-order/${orderId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ reason })
                        }).then(response => {
                            if (response.ok) {
                                Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success')
                                    .then(() => window.location.reload());
                            } else {
                                Swal.fire('Error!', 'Unable to cancel your order.', 'error');
                            }
                        });
                    }
                });
            }
        });
    });

    // Return Order Logic with Reason
    document.querySelectorAll('.return-btn').forEach(button => {
        button.addEventListener('click', () => {
            const orderId = button.getAttribute('data-order-id');

            Swal.fire({
                title: 'Return Order',
                text: 'Please provide a reason for returning this order.',
                icon: 'info',
                input: 'textarea',
                inputPlaceholder: 'Enter reason for return...',
                inputAttributes: {
                    'aria-label': 'Enter reason for return'
                },
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Submit Return Request',
                preConfirm: (reason) => {
                    if (!reason) {
                        Swal.showValidationMessage('Return reason is required!');
                    }
                    return reason;
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const reason = result.value;
                    fetch('/return-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ reason,orderId })
                    }).then(response => {
                        if (response.ok) {
                            Swal.fire('Return Requested!', 'Your return request has been submitted.', 'success')
                                .then(() => window.location.reload());
                        } else {
                            Swal.fire('Error!', 'Unable to process return request.', 'error');
                        }
                    });
                }
            });
        });
    });
</script>
